# type
type BookReservation implements Node {
  id: ID! @goField(forceResolver: true)
  book: Book! @goField(forceResolver: true)
  borrower: User! @goField(forceResolver: true)
  reservationStatus: ReservationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

# enum
enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
}

# input
input createBookReservationInput {
  bookId: ID!
  borrowerId: ID!
}

input updateBookReservationInput {
  id: ID!
  reservationStatus: ReservationStatus!
}

# payload
type createBookReservationPayload implements Node {
  id: ID! @goField(forceResolver: true)
  book: Book! @goField(forceResolver: true)
  borrower: User! @goField(forceResolver: true)
  reservationStatus: ReservationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type updateBookReservationPayload implements Node {
  id: ID! @goField(forceResolver: true)
  book: Book! @goField(forceResolver: true)
  borrower: User! @goField(forceResolver: true)
  reservationStatus: ReservationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

# Mutation
extend type Mutation {
  createBookReservation(input: createBookReservationInput!): createBookReservationPayload!
  updateBookReservation(input: updateBookReservationInput!): updateBookReservationPayload!
  deleteBookReservation(id: ID!): Boolean!
}

# Query
extend type Query {
  bookReservation(id: ID!): BookReservation
  bookReservations: [BookReservation!]!
}