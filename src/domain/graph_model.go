// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package domain

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	GetID() string
}

type Book struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	Author    string     `json:"author"`
	Owner     *User      `json:"owner"`
	Status    BookStatus `json:"status"`
	CreatedAt string     `json:"createdAt"`
	UpdatedAt string     `json:"updatedAt"`
	DeletedAt *string    `json:"deletedAt,omitempty"`
}

func (Book) IsNode()            {}
func (this Book) GetID() string { return this.ID }

type BookLike struct {
	ID        string `json:"id"`
	Book      *Book  `json:"book"`
	User      *User  `json:"user"`
	CreatedAt string `json:"createdAt"`
}

func (BookLike) IsNode()            {}
func (this BookLike) GetID() string { return this.ID }

type BookReservation struct {
	ID                string            `json:"id"`
	Book              *Book             `json:"book"`
	Borrower          *User             `json:"borrower"`
	ReservationStatus ReservationStatus `json:"reservationStatus"`
	CreatedAt         string            `json:"createdAt"`
	UpdatedAt         string            `json:"updatedAt"`
	DeletedAt         *string           `json:"deletedAt,omitempty"`
}

func (BookReservation) IsNode()            {}
func (this BookReservation) GetID() string { return this.ID }

type Message struct {
	ID        string   `json:"id"`
	Request   *Request `json:"request"`
	Sender    *User    `json:"sender"`
	Message   string   `json:"message"`
	CreatedAt string   `json:"createdAt"`
}

func (Message) IsNode()            {}
func (this Message) GetID() string { return this.ID }

type Mutation struct {
}

type Query struct {
}

type Request struct {
	ID            string        `json:"id"`
	Book          *Book         `json:"book"`
	Borrower      *User         `json:"borrower"`
	RequestStatus RequestStatus `json:"requestStatus"`
	CreatedAt     string        `json:"createdAt"`
	UpdatedAt     string        `json:"updatedAt"`
	DeletedAt     *string       `json:"deletedAt,omitempty"`
	Messages      []*Message    `json:"messages"`
}

func (Request) IsNode()            {}
func (this Request) GetID() string { return this.ID }

type Subscription struct {
}

type User struct {
	ID            string     `json:"id"`
	Username      string     `json:"username"`
	Email         string     `json:"email"`
	CreatedAt     string     `json:"createdAt"`
	UpdatedAt     string     `json:"updatedAt"`
	DeletedAt     *string    `json:"deletedAt,omitempty"`
	Books         []*Book    `json:"books"`
	BooksLent     []*Book    `json:"booksLent"`
	BooksBorrowed []*Book    `json:"booksBorrowed"`
	Requests      []*Request `json:"requests"`
	Messages      []*Message `json:"messages"`
}

func (User) IsNode()            {}
func (this User) GetID() string { return this.ID }

type CreateBookInput struct {
	Title   string `json:"title"`
	Author  string `json:"author"`
	OwnerID string `json:"ownerId"`
}

type CreateBookLikeInput struct {
	BookID string `json:"bookId"`
	UserID string `json:"userId"`
}

type CreateBookLikePayload struct {
	ID        string `json:"id"`
	Book      *Book  `json:"book"`
	User      *User  `json:"user"`
	CreatedAt string `json:"createdAt"`
}

func (CreateBookLikePayload) IsNode()            {}
func (this CreateBookLikePayload) GetID() string { return this.ID }

type CreateBookPayload struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	Author    string     `json:"author"`
	Owner     *User      `json:"owner"`
	Status    BookStatus `json:"status"`
	CreatedAt string     `json:"createdAt"`
	UpdatedAt string     `json:"updatedAt"`
	DeletedAt *string    `json:"deletedAt,omitempty"`
}

func (CreateBookPayload) IsNode()            {}
func (this CreateBookPayload) GetID() string { return this.ID }

type CreateBookReservationInput struct {
	BookID     string `json:"bookId"`
	BorrowerID string `json:"borrowerId"`
}

type CreateBookReservationPayload struct {
	ID                string            `json:"id"`
	Book              *Book             `json:"book"`
	Borrower          *User             `json:"borrower"`
	ReservationStatus ReservationStatus `json:"reservationStatus"`
	CreatedAt         string            `json:"createdAt"`
	UpdatedAt         string            `json:"updatedAt"`
	DeletedAt         *string           `json:"deletedAt,omitempty"`
}

func (CreateBookReservationPayload) IsNode()            {}
func (this CreateBookReservationPayload) GetID() string { return this.ID }

type CreateMessageInput struct {
	RequestID string `json:"requestId"`
	SenderID  string `json:"senderId"`
	Message   string `json:"message"`
}

type CreateMessagePayload struct {
	ID        string   `json:"id"`
	Request   *Request `json:"request"`
	Sender    *User    `json:"sender"`
	Message   string   `json:"message"`
	CreatedAt string   `json:"createdAt"`
}

func (CreateMessagePayload) IsNode()            {}
func (this CreateMessagePayload) GetID() string { return this.ID }

type CreateRequestInput struct {
	BookID     string `json:"bookId"`
	BorrowerID string `json:"borrowerId"`
}

type CreateRequestPayload struct {
	ID            string        `json:"id"`
	Book          *Book         `json:"book"`
	Borrower      *User         `json:"borrower"`
	RequestStatus RequestStatus `json:"requestStatus"`
	CreatedAt     string        `json:"createdAt"`
	UpdatedAt     string        `json:"updatedAt"`
	DeletedAt     *string       `json:"deletedAt,omitempty"`
}

func (CreateRequestPayload) IsNode()            {}
func (this CreateRequestPayload) GetID() string { return this.ID }

type CreateUserInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserPayload struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Email     string `json:"email"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

func (CreateUserPayload) IsNode()            {}
func (this CreateUserPayload) GetID() string { return this.ID }

type UpdateBookInput struct {
	ID     string      `json:"id"`
	Title  *string     `json:"title,omitempty"`
	Author *string     `json:"author,omitempty"`
	Status *BookStatus `json:"status,omitempty"`
}

type UpdateBookLikeInput struct {
	ID string `json:"id"`
}

type UpdateBookLikePayload struct {
	ID        string `json:"id"`
	Book      *Book  `json:"book"`
	User      *User  `json:"user"`
	CreatedAt string `json:"createdAt"`
}

func (UpdateBookLikePayload) IsNode()            {}
func (this UpdateBookLikePayload) GetID() string { return this.ID }

type UpdateBookPayload struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	Author    string     `json:"author"`
	Owner     *User      `json:"owner"`
	Status    BookStatus `json:"status"`
	CreatedAt string     `json:"createdAt"`
	UpdatedAt string     `json:"updatedAt"`
	DeletedAt *string    `json:"deletedAt,omitempty"`
}

func (UpdateBookPayload) IsNode()            {}
func (this UpdateBookPayload) GetID() string { return this.ID }

type UpdateBookReservationInput struct {
	ID                string            `json:"id"`
	ReservationStatus ReservationStatus `json:"reservationStatus"`
}

type UpdateBookReservationPayload struct {
	ID                string            `json:"id"`
	Book              *Book             `json:"book"`
	Borrower          *User             `json:"borrower"`
	ReservationStatus ReservationStatus `json:"reservationStatus"`
	CreatedAt         string            `json:"createdAt"`
	UpdatedAt         string            `json:"updatedAt"`
	DeletedAt         *string           `json:"deletedAt,omitempty"`
}

func (UpdateBookReservationPayload) IsNode()            {}
func (this UpdateBookReservationPayload) GetID() string { return this.ID }

type UpdateMessageInput struct {
	ID      string `json:"id"`
	Message string `json:"message"`
}

type UpdateMessagePayload struct {
	ID        string   `json:"id"`
	Request   *Request `json:"request"`
	Sender    *User    `json:"sender"`
	Message   string   `json:"message"`
	CreatedAt string   `json:"createdAt"`
}

func (UpdateMessagePayload) IsNode()            {}
func (this UpdateMessagePayload) GetID() string { return this.ID }

type UpdateRequestInput struct {
	ID            string        `json:"id"`
	RequestStatus RequestStatus `json:"requestStatus"`
}

type UpdateRequestPayload struct {
	ID            string        `json:"id"`
	Book          *Book         `json:"book"`
	Borrower      *User         `json:"borrower"`
	RequestStatus RequestStatus `json:"requestStatus"`
	CreatedAt     string        `json:"createdAt"`
	UpdatedAt     string        `json:"updatedAt"`
	DeletedAt     *string       `json:"deletedAt,omitempty"`
}

func (UpdateRequestPayload) IsNode()            {}
func (this UpdateRequestPayload) GetID() string { return this.ID }

type UpdateUserInput struct {
	ID       string  `json:"id"`
	Username *string `json:"username,omitempty"`
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

type UpdateUserPayload struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Email     string `json:"email"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

func (UpdateUserPayload) IsNode()            {}
func (this UpdateUserPayload) GetID() string { return this.ID }

type BookStatus string

const (
	BookStatusAvailable BookStatus = "AVAILABLE"
	BookStatusBorrowed  BookStatus = "BORROWED"
	BookStatusReserved  BookStatus = "RESERVED"
)

var AllBookStatus = []BookStatus{
	BookStatusAvailable,
	BookStatusBorrowed,
	BookStatusReserved,
}

func (e BookStatus) IsValid() bool {
	switch e {
	case BookStatusAvailable, BookStatusBorrowed, BookStatusReserved:
		return true
	}
	return false
}

func (e BookStatus) String() string {
	return string(e)
}

func (e *BookStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookStatus", str)
	}
	return nil
}

func (e BookStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestStatus string

const (
	RequestStatusPending  RequestStatus = "PENDING"
	RequestStatusApproved RequestStatus = "APPROVED"
	RequestStatusRejected RequestStatus = "REJECTED"
)

var AllRequestStatus = []RequestStatus{
	RequestStatusPending,
	RequestStatusApproved,
	RequestStatusRejected,
}

func (e RequestStatus) IsValid() bool {
	switch e {
	case RequestStatusPending, RequestStatusApproved, RequestStatusRejected:
		return true
	}
	return false
}

func (e RequestStatus) String() string {
	return string(e)
}

func (e *RequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestStatus", str)
	}
	return nil
}

func (e RequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReservationStatus string

const (
	ReservationStatusPending  ReservationStatus = "PENDING"
	ReservationStatusApproved ReservationStatus = "APPROVED"
	ReservationStatusRejected ReservationStatus = "REJECTED"
)

var AllReservationStatus = []ReservationStatus{
	ReservationStatusPending,
	ReservationStatusApproved,
	ReservationStatusRejected,
}

func (e ReservationStatus) IsValid() bool {
	switch e {
	case ReservationStatusPending, ReservationStatusApproved, ReservationStatusRejected:
		return true
	}
	return false
}

func (e ReservationStatus) String() string {
	return string(e)
}

func (e *ReservationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReservationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReservationStatus", str)
	}
	return nil
}

func (e ReservationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
