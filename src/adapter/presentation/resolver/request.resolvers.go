package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/yuorei/bukubukubooking-back/graph/generated"
	"github.com/yuorei/bukubukubooking-back/src/domain"
)

// CreateRequest is the resolver for the createRequest field.
func (r *mutationResolver) CreateRequest(ctx context.Context, input domain.CreateRequestInput) (*domain.CreateRequestPayload, error) {
	panic(fmt.Errorf("not implemented: CreateRequest - createRequest"))
}

// UpdateRequest is the resolver for the updateRequest field.
func (r *mutationResolver) UpdateRequest(ctx context.Context, input domain.UpdateRequestInput) (*domain.UpdateRequestPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateRequest - updateRequest"))
}

// DeleteRequest is the resolver for the deleteRequest field.
func (r *mutationResolver) DeleteRequest(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRequest - deleteRequest"))
}

// Request is the resolver for the request field.
func (r *queryResolver) Request(ctx context.Context, id string) (*domain.Request, error) {
	panic(fmt.Errorf("not implemented: Request - request"))
}

// Requests is the resolver for the requests field.
func (r *queryResolver) Requests(ctx context.Context) ([]*domain.Request, error) {
	panic(fmt.Errorf("not implemented: Requests - requests"))
}

// ID is the resolver for the id field.
func (r *requestResolver) ID(ctx context.Context, obj *domain.Request) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *requestResolver) Book(ctx context.Context, obj *domain.Request) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Borrower is the resolver for the borrower field.
func (r *requestResolver) Borrower(ctx context.Context, obj *domain.Request) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Borrower - borrower"))
}

// Messages is the resolver for the messages field.
func (r *requestResolver) Messages(ctx context.Context, obj *domain.Request) ([]*domain.Message, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// ID is the resolver for the id field.
func (r *createRequestPayloadResolver) ID(ctx context.Context, obj *domain.CreateRequestPayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *createRequestPayloadResolver) Book(ctx context.Context, obj *domain.CreateRequestPayload) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Borrower is the resolver for the borrower field.
func (r *createRequestPayloadResolver) Borrower(ctx context.Context, obj *domain.CreateRequestPayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Borrower - borrower"))
}

// ID is the resolver for the id field.
func (r *updateRequestPayloadResolver) ID(ctx context.Context, obj *domain.UpdateRequestPayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *updateRequestPayloadResolver) Book(ctx context.Context, obj *domain.UpdateRequestPayload) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Borrower is the resolver for the borrower field.
func (r *updateRequestPayloadResolver) Borrower(ctx context.Context, obj *domain.UpdateRequestPayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Borrower - borrower"))
}

// Request returns generated.RequestResolver implementation.
func (r *Resolver) Request() generated.RequestResolver { return &requestResolver{r} }

// CreateRequestPayload returns generated.CreateRequestPayloadResolver implementation.
func (r *Resolver) CreateRequestPayload() generated.CreateRequestPayloadResolver {
	return &createRequestPayloadResolver{r}
}

// UpdateRequestPayload returns generated.UpdateRequestPayloadResolver implementation.
func (r *Resolver) UpdateRequestPayload() generated.UpdateRequestPayloadResolver {
	return &updateRequestPayloadResolver{r}
}

type requestResolver struct{ *Resolver }
type createRequestPayloadResolver struct{ *Resolver }
type updateRequestPayloadResolver struct{ *Resolver }
