package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/yuorei/bukubukubooking-back/graph/generated"
	"github.com/yuorei/bukubukubooking-back/src/domain"
)

// ID is the resolver for the id field.
func (r *bookReservationResolver) ID(ctx context.Context, obj *domain.BookReservation) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *bookReservationResolver) Book(ctx context.Context, obj *domain.BookReservation) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Borrower is the resolver for the borrower field.
func (r *bookReservationResolver) Borrower(ctx context.Context, obj *domain.BookReservation) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Borrower - borrower"))
}

// CreateBookReservation is the resolver for the createBookReservation field.
func (r *mutationResolver) CreateBookReservation(ctx context.Context, input domain.CreateBookReservationInput) (*domain.CreateBookReservationPayload, error) {
	panic(fmt.Errorf("not implemented: CreateBookReservation - createBookReservation"))
}

// UpdateBookReservation is the resolver for the updateBookReservation field.
func (r *mutationResolver) UpdateBookReservation(ctx context.Context, input domain.UpdateBookReservationInput) (*domain.UpdateBookReservationPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateBookReservation - updateBookReservation"))
}

// DeleteBookReservation is the resolver for the deleteBookReservation field.
func (r *mutationResolver) DeleteBookReservation(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBookReservation - deleteBookReservation"))
}

// BookReservation is the resolver for the bookReservation field.
func (r *queryResolver) BookReservation(ctx context.Context, id string) (*domain.BookReservation, error) {
	panic(fmt.Errorf("not implemented: BookReservation - bookReservation"))
}

// BookReservations is the resolver for the bookReservations field.
func (r *queryResolver) BookReservations(ctx context.Context) ([]*domain.BookReservation, error) {
	panic(fmt.Errorf("not implemented: BookReservations - bookReservations"))
}

// ID is the resolver for the id field.
func (r *createBookReservationPayloadResolver) ID(ctx context.Context, obj *domain.CreateBookReservationPayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *createBookReservationPayloadResolver) Book(ctx context.Context, obj *domain.CreateBookReservationPayload) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Borrower is the resolver for the borrower field.
func (r *createBookReservationPayloadResolver) Borrower(ctx context.Context, obj *domain.CreateBookReservationPayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Borrower - borrower"))
}

// ID is the resolver for the id field.
func (r *updateBookReservationPayloadResolver) ID(ctx context.Context, obj *domain.UpdateBookReservationPayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *updateBookReservationPayloadResolver) Book(ctx context.Context, obj *domain.UpdateBookReservationPayload) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Borrower is the resolver for the borrower field.
func (r *updateBookReservationPayloadResolver) Borrower(ctx context.Context, obj *domain.UpdateBookReservationPayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Borrower - borrower"))
}

// BookReservation returns generated.BookReservationResolver implementation.
func (r *Resolver) BookReservation() generated.BookReservationResolver {
	return &bookReservationResolver{r}
}

// CreateBookReservationPayload returns generated.CreateBookReservationPayloadResolver implementation.
func (r *Resolver) CreateBookReservationPayload() generated.CreateBookReservationPayloadResolver {
	return &createBookReservationPayloadResolver{r}
}

// UpdateBookReservationPayload returns generated.UpdateBookReservationPayloadResolver implementation.
func (r *Resolver) UpdateBookReservationPayload() generated.UpdateBookReservationPayloadResolver {
	return &updateBookReservationPayloadResolver{r}
}

type bookReservationResolver struct{ *Resolver }
type createBookReservationPayloadResolver struct{ *Resolver }
type updateBookReservationPayloadResolver struct{ *Resolver }
