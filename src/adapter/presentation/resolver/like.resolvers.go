package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/yuorei/bukubukubooking-back/graph/generated"
	"github.com/yuorei/bukubukubooking-back/src/domain"
)

// ID is the resolver for the id field.
func (r *bookLikeResolver) ID(ctx context.Context, obj *domain.BookLike) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *bookLikeResolver) Book(ctx context.Context, obj *domain.BookLike) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// User is the resolver for the user field.
func (r *bookLikeResolver) User(ctx context.Context, obj *domain.BookLike) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// CreateBookLike is the resolver for the createBookLike field.
func (r *mutationResolver) CreateBookLike(ctx context.Context, input domain.CreateBookLikeInput) (*domain.CreateBookLikePayload, error) {
	panic(fmt.Errorf("not implemented: CreateBookLike - createBookLike"))
}

// UpdateBookLike is the resolver for the updateBookLike field.
func (r *mutationResolver) UpdateBookLike(ctx context.Context, input domain.UpdateBookLikeInput) (*domain.UpdateBookLikePayload, error) {
	panic(fmt.Errorf("not implemented: UpdateBookLike - updateBookLike"))
}

// DeleteBookLike is the resolver for the deleteBookLike field.
func (r *mutationResolver) DeleteBookLike(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBookLike - deleteBookLike"))
}

// BookLike is the resolver for the bookLike field.
func (r *queryResolver) BookLike(ctx context.Context, id string) (*domain.BookLike, error) {
	panic(fmt.Errorf("not implemented: BookLike - bookLike"))
}

// BookLikes is the resolver for the bookLikes field.
func (r *queryResolver) BookLikes(ctx context.Context, bookID string) ([]*domain.BookLike, error) {
	panic(fmt.Errorf("not implemented: BookLikes - bookLikes"))
}

// ID is the resolver for the id field.
func (r *createBookLikePayloadResolver) ID(ctx context.Context, obj *domain.CreateBookLikePayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *createBookLikePayloadResolver) Book(ctx context.Context, obj *domain.CreateBookLikePayload) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// User is the resolver for the user field.
func (r *createBookLikePayloadResolver) User(ctx context.Context, obj *domain.CreateBookLikePayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// ID is the resolver for the id field.
func (r *updateBookLikePayloadResolver) ID(ctx context.Context, obj *domain.UpdateBookLikePayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Book is the resolver for the book field.
func (r *updateBookLikePayloadResolver) Book(ctx context.Context, obj *domain.UpdateBookLikePayload) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// User is the resolver for the user field.
func (r *updateBookLikePayloadResolver) User(ctx context.Context, obj *domain.UpdateBookLikePayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// BookLike returns generated.BookLikeResolver implementation.
func (r *Resolver) BookLike() generated.BookLikeResolver { return &bookLikeResolver{r} }

// CreateBookLikePayload returns generated.CreateBookLikePayloadResolver implementation.
func (r *Resolver) CreateBookLikePayload() generated.CreateBookLikePayloadResolver {
	return &createBookLikePayloadResolver{r}
}

// UpdateBookLikePayload returns generated.UpdateBookLikePayloadResolver implementation.
func (r *Resolver) UpdateBookLikePayload() generated.UpdateBookLikePayloadResolver {
	return &updateBookLikePayloadResolver{r}
}

type bookLikeResolver struct{ *Resolver }
type createBookLikePayloadResolver struct{ *Resolver }
type updateBookLikePayloadResolver struct{ *Resolver }
