package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/yuorei/bukubukubooking-back/graph/generated"
	"github.com/yuorei/bukubukubooking-back/src/domain"
)

// ID is the resolver for the id field.
func (r *bookResolver) ID(ctx context.Context, obj *domain.Book) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Owner is the resolver for the owner field.
func (r *bookResolver) Owner(ctx context.Context, obj *domain.Book) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input domain.CreateBookInput) (*domain.CreateBookPayload, error) {
	panic(fmt.Errorf("not implemented: CreateBook - createBook"))
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, input domain.UpdateBookInput) (*domain.UpdateBookPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBook - deleteBook"))
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*domain.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// ID is the resolver for the id field.
func (r *createBookPayloadResolver) ID(ctx context.Context, obj *domain.CreateBookPayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Owner is the resolver for the owner field.
func (r *createBookPayloadResolver) Owner(ctx context.Context, obj *domain.CreateBookPayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// ID is the resolver for the id field.
func (r *updateBookPayloadResolver) ID(ctx context.Context, obj *domain.UpdateBookPayload) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Owner is the resolver for the owner field.
func (r *updateBookPayloadResolver) Owner(ctx context.Context, obj *domain.UpdateBookPayload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Book returns generated.BookResolver implementation.
func (r *Resolver) Book() generated.BookResolver { return &bookResolver{r} }

// CreateBookPayload returns generated.CreateBookPayloadResolver implementation.
func (r *Resolver) CreateBookPayload() generated.CreateBookPayloadResolver {
	return &createBookPayloadResolver{r}
}

// UpdateBookPayload returns generated.UpdateBookPayloadResolver implementation.
func (r *Resolver) UpdateBookPayload() generated.UpdateBookPayloadResolver {
	return &updateBookPayloadResolver{r}
}

type bookResolver struct{ *Resolver }
type createBookPayloadResolver struct{ *Resolver }
type updateBookPayloadResolver struct{ *Resolver }
